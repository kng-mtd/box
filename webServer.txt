https://chatgpt.com/c/67b4e2a5-8e5c-800c-9ca4-da6424d3afb4

Node.js をバックエンドにして、HTMX + Alpine.js の Web ページを作る場合、基本的な構成は以下のようになります。  

1. **フロントエンド (HTML, Alpine.js, HTMX)**  
   - HTMX を使ってサーバーと通信し、HTML を部分更新  
   - Alpine.js でインタラクティブな UI を実装  
2. **バックエンド (Node.js + Express)**  
   - HTMX のリクエストに応じて HTML を返す API を提供  

---

## **📌 必要なセットアップ**
まず、Node.js の環境をセットアップし、Express を使ってサーバーを作ります。  

```sh
mkdir htmx-alpine-node
cd htmx-alpine-node
npm init -y
npm install express
```

---

## **🔧 バックエンド: Express サーバー (server.js)**  
`server.js` を作成して、HTMX のリクエストに HTML を返すようにします。  

```javascript
const express = require("express");
const app = express();
const port = 3000;

app.use(express.static("public")); // 静的ファイルを提供

// HTMX のリクエストに応答するルート
app.get("/hello", (req, res) => {
    res.send("<p>こんにちは！HTMX でロードしました。</p>");
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});
```

---

## **🖥️ フロントエンド: HTMX + Alpine.js (public/index.html)**
HTMX でサーバーから HTML を取得し、Alpine.js で UI のインタラクションを追加します。

```html
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTMX + Alpine.js + Node.js</title>
    <script src="https://unpkg.com/htmx.org"></script>
    <script src="https://unpkg.com/alpinejs" defer></script>
    <style>
        .hidden { display: none; }
    </style>
</head>
<body>

    <h1>HTMX + Alpine.js + Node.js のサンプル</h1>

    <!-- HTMX を使ったサーバー通信 -->
    <button hx-get="/hello" hx-target="#response">
        サーバーからデータ取得
    </button>
    <div id="response"></div>

    <!-- Alpine.js を使ったインタラクション -->
    <div x-data="{ open: false }">
        <button @click="open = !open">詳細を表示</button>
        <p x-show="open" class="hidden">ここに詳細情報があります。</p>
    </div>

</body>
</html>
```

---

## **🚀 サーバー起動**
作成した `server.js` を実行して、ローカルサーバーを立ち上げます。  

```sh
node server.js
```

ブラウザで [http://localhost:3000](http://localhost:3000) にアクセスすれば、  
HTMX でサーバーからデータを取得し、Alpine.js でインタラクションを提供する Web ページが動作します！ 🚀  

---

## **🔹 拡張案**
- **データベース連携 (MongoDB, PostgreSQL, MySQL)**
- **HTMX の WebSocket 拡張を使ってリアルタイム更新**
- **フォームの送信処理 (HTMX の `hx-post`)**
- **Alpine.js でリッチな UI (モーダル、アコーディオン、タブ UI)**



Node.js + Express に **Basic 認証** を追加する方法を説明します。  
Basic 認証を追加すると、指定したユーザー名とパスワードを入力しないとページにアクセスできなくなります。  

---

## **📌 手順**
1. **Basic 認証用のミドルウェアを作成**
2. **Express に適用**
3. **保護したいルートに認証を適用**

---

## **🔧 サーバー (server.js)**
Basic 認証をミドルウェアとして実装し、特定のルートを保護します。  

```javascript
const express = require("express");

const app = express();
const port = 3000;

// Basic 認証のユーザー名とパスワード
const USERNAME = "admin";
const PASSWORD = "password";

// Basic 認証のミドルウェア
const basicAuth = (req, res, next) => {
    const authHeader = req.headers.authorization;

    // 認証ヘッダーがない場合
    if (!authHeader || !authHeader.startsWith("Basic ")) {
        res.set("WWW-Authenticate", 'Basic realm="Restricted"');
        return res.status(401).send("認証が必要です");
    }

    try {
        const encoded = authHeader.split(" ")[1];
        const decoded = Buffer.from(encoded, "base64").toString("utf-8");

        // ユーザー名とパスワードを取得
        const credentials = decoded.split(":");
        if (credentials.length !== 2) {
            throw new Error("Invalid auth format");
        }

        const [user, pass] = credentials;

        // 認証チェック
        if (user === USERNAME && pass === PASSWORD) {
            return next(); // 認証成功
        }
    } catch (error) {
        console.error("Basic 認証エラー:", error.message);
    }

    // 認証失敗時のレスポンス
    res.set("WWW-Authenticate", 'Basic realm="Restricted"');
    return res.status(401).send("認証失敗");
};


// Basic 認証を適用するルート
app.use(basicAuth);

// 静的ファイル (フロントエンド) を提供
app.use(express.static("public"));

// HTMX 用のエンドポイント
app.get("/hello", (req, res) => {
    res.send("<p>こんにちは！HTMX でロードしました。</p>");
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});
```

---

## **🖥️ 動作確認**
1. `node server.js` を実行
2. ブラウザで [http://localhost:3000](http://localhost:3000) にアクセス  
3. Basic 認証のダイアログが表示される  
4. **ユーザー名: `admin`**, **パスワード: `password`** を入力  
5. 認証が成功するとページが表示される 🎉  

---

## **🔹 改良ポイント**
1. **`.env` ファイルを使って認証情報を管理**（`dotenv` を利用）
2. **特定のルートのみに Basic 認証を適用**（`app.use(basicAuth);` の代わりに `app.get("/protected", basicAuth, handler)` ）
3. **より安全な認証方式にする**（JWT, セッション認証など）

---

この `basicAuth` ミドルウェアは、**Node.js + Express** で **Basic 認証** を実装するための関数です。  
リクエストの `Authorization` ヘッダーを解析し、ユーザー名とパスワードが正しいかをチェックします。  

---

## **📌 コードの詳細な解説**
```javascript
const basicAuth = (req, res, next) => {
```
- Express のミドルウェア関数を定義  
- `req`（リクエスト）, `res`（レスポンス）, `next`（次のミドルウェアを呼び出す関数）を受け取る  

---

### **1️⃣ Authorization ヘッダーの確認**
```javascript
const authHeader = req.headers.authorization;
```
- クライアント（ブラウザなど）が送信する **`Authorization` ヘッダー** を取得  

```javascript
if (!authHeader || !authHeader.startsWith("Basic ")) {
    res.set("WWW-Authenticate", 'Basic realm="Restricted"');
    return res.status(401).send("認証が必要です");
}
```
- `authHeader` が存在しない or `"Basic "` で始まらない場合、認証を要求するレスポンスを返す  
- **`WWW-Authenticate` ヘッダー** をセットすると、ブラウザは **Basic 認証のログインダイアログ** を表示する  

---

### **2️⃣ ユーザー名・パスワードの解析**
```javascript
try {
    const encoded = authHeader.split(" ")[1]; // "Basic xxxxxxx" の "xxxxx" を取得
    const decoded = Buffer.from(encoded, "base64").toString("utf-8");
```
- `authHeader` のフォーマットは `"Basic dXNlcm5hbWU6cGFzc3dvcmQ="`（Base64 エンコード済み）  
- `"Basic "` の後ろの部分 (`dXNlcm5hbWU6cGFzc3dvcmQ=`) を取り出し、Base64 でデコード  
- デコード後の `decoded` の中身は `"username:password"` になる  

---

### **3️⃣ ユーザー名・パスワードのフォーマットを確認**
```javascript
const credentials = decoded.split(":");
if (credentials.length !== 2) {
    throw new Error("Invalid auth format");
}

const [user, pass] = credentials;
```
- `":"` で分割し、`["username", "password"]` の形になっているかチェック  
- `credentials.length !== 2` の場合、フォーマットが間違っているためエラーをスロー  

---

### **4️⃣ ユーザー名・パスワードの認証**
```javascript
if (user === USERNAME && pass === PASSWORD) {
    return next(); // 認証成功 → 次のミドルウェアへ
}
```
- 事前に定義した `USERNAME` と `PASSWORD`（例: `"admin"` と `"password"`) と比較  
- **一致すれば `next()` を呼び出し、処理を次に進める**（ページを表示するなど）  

---

### **5️⃣ 認証エラーの処理**
```javascript
} catch (error) {
    console.error("Basic 認証エラー:", error.message);
}
```
- `Base64` のデコード時や `split(":")` の処理でエラーが発生した場合、**ログにエラー内容を出力**  
- 例えば、`authHeader.split(" ")[1]` が `undefined` だと `Buffer.from(undefined, "base64")` でエラーになる  

```javascript
res.set("WWW-Authenticate", 'Basic realm="Restricted"');
return res.status(401).send("認証失敗");
```
- 認証に失敗した場合、`401 Unauthorized` を返す  
- **`WWW-Authenticate` ヘッダーをセットすることで、ブラウザが再び認証を求める**  

---

## **📌 処理の流れ**
| ステップ | 説明 |
|---------|------|
| ① `Authorization` ヘッダーを取得 | リクエストの `Authorization` を取得 |
| ② ヘッダーのフォーマット確認 | `"Basic "` で始まるかチェック |
| ③ Base64 をデコード | `"username:password"` の形式に変換 |
| ④ ユーザー名とパスワードを抽出 | `":"` で分割し、配列 `["user", "pass"]` を取得 |
| ⑤ ユーザー名とパスワードを比較 | 一致すれば `next()` を実行 |
| ⑥ 認証失敗時の処理 | `401 Unauthorized` を返してアクセスを拒否 |

---

## **🛠 実装のポイント**
✅ **エラーハンドリングを強化** → `try-catch` を使い、不正なリクエストを適切に処理  
✅ **セキュリティを考慮** → `split(":")` のチェックを追加し、フォーマットが正しいか確認  
✅ **ブラウザの再認証を促す** → `WWW-Authenticate` ヘッダーを設定し、ダイアログを再表示  

---


## **1️⃣ `.env` ファイルを使って認証情報を管理（`dotenv` を利用）**  

環境変数を使うことで、**ソースコードに認証情報を直接書かずに管理** できます。  
これにより、**セキュリティ向上 & 設定の変更が簡単** になります。  

### **📌 手順**
1. **`dotenv` をインストール**
2. **`.env` ファイルを作成し、認証情報を定義**
3. **`dotenv` を使って環境変数を読み込む**

---

### **🔧 `dotenv` のインストール**
まず、`dotenv` をインストールします。  

```sh
npm install dotenv
```

---

### **📄 `.env` ファイルを作成**
ルートディレクトリに `.env` ファイルを作り、以下のように認証情報を記述します。  

```ini
BASIC_AUTH_USER=admin
BASIC_AUTH_PASS=password
```

**⚠ `.env` ファイルは `.gitignore` に追加する！**
```ini
# .gitignore
.env
```
こうすることで、GitHub などに **認証情報を誤って公開するリスクを防げる** ！

---

### **📝 `server.js` を修正**
環境変数を使うように修正します。  

```javascript
require("dotenv").config(); // dotenv を読み込む
const express = require("express");

const app = express();
const port = 3000;

// .env から認証情報を取得
const USERNAME = process.env.BASIC_AUTH_USER;
const PASSWORD = process.env.BASIC_AUTH_PASS;

const basicAuth = (req, res, next) => {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith("Basic ")) {
        res.set("WWW-Authenticate", 'Basic realm="Restricted"');
        return res.status(401).send("認証が必要です");
    }

    try {
        const encoded = authHeader.split(" ")[1];
        const decoded = Buffer.from(encoded, "base64").toString("utf-8");

        const credentials = decoded.split(":");
        if (credentials.length !== 2) {
            throw new Error("Invalid auth format");
        }

        const [user, pass] = credentials;

        if (user === USERNAME && pass === PASSWORD) {
            return next(); // 認証成功
        }
    } catch (error) {
        console.error("Basic 認証エラー:", error.message);
    }

    res.set("WWW-Authenticate", 'Basic realm="Restricted"');
    return res.status(401).send("認証失敗");
};

// 静的ファイルを提供
app.use(express.static("public"));

// HTMX 用のエンドポイント
app.get("/hello", (req, res) => {
    res.send("<p>こんにちは！HTMX でロードしました。</p>");
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
});
```

**✅ これで `.env` に記述した認証情報を読み込める！**  

---

## **2️⃣ 特定のルートのみに Basic 認証を適用**  

現在のコードでは、**すべてのリクエストに Basic 認証を適用** しています。  
しかし、`app.use(basicAuth);` を削除し、**特定のルートだけに適用** することもできます。  

---

### **📝 修正後の `server.js`**
```javascript
// `/protected` ルートだけ Basic 認証を適用
app.get("/protected", basicAuth, (req, res) => {
    res.send("<h2>このページは認証が必要です！</h2>");
});
```

### **📌 変更点**
- `app.use(basicAuth);` → **削除**
- `app.get("/protected", basicAuth, handler);` → **特定のルートだけに認証を適用**

---

### **🚀 動作確認**
1. `/protected` にアクセス: **認証ダイアログが表示**
   ```sh
   http://localhost:3000/protected
   ```
2. `/hello` にアクセス: **認証なしでアクセス可能**
   ```sh
   http://localhost:3000/hello
   ```

---


## **📌 概要**
Node.js（Express）+ HTMX + SQLite を使って、**CRUD（Create, Read, Update, Delete）** を実装する方法を説明します。  
HTMX を使うことで、**ページをリロードせずに動的にデータを操作** できます。  

---

## **🛠 使用する技術**
✅ **フロントエンド:** HTMX（シンプルな動的ページ操作）  
✅ **バックエンド:** Express（Node.js のフレームワーク）  
✅ **データベース:** SQLite3（軽量なデータベース）  
✅ **ORM:** `better-sqlite3`（シンプルで速い SQLite のラッパー）  

---

## **📂 フォルダ構成**
```
project/
│── public/          # 静的ファイル（HTML, CSS, JS）
│── views/           # テンプレート（EJS）
│── db.sqlite        # SQLite データベースファイル
│── server.js        # メインのサーバースクリプト
│── package.json     # npm パッケージ情報
│── .env             # 環境変数
```

---

## **📌 1. プロジェクトのセットアップ**
### **① 必要なパッケージをインストール**
```sh
npm init -y
npm install express htmx.org ejs dotenv better-sqlite3
```

### **② SQLite データベースを作成**
```sh
touch db.sqlite
```

---

## **📌 2. `server.js`（Express + SQLite のバックエンド）**
```javascript
require("dotenv").config();
const express = require("express");
const Database = require("better-sqlite3");
const path = require("path");

const app = express();
const port = 3000;
const db = new Database("db.sqlite");

// テーブル作成（初回のみ）
db.prepare(`
    CREATE TABLE IF NOT EXISTS items (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL
    )
`).run();

// ミドルウェア
app.use(express.urlencoded({ extended: true }));
app.use(express.static("public"));
app.set("view engine", "ejs");

// **📌 Read (一覧表示)**
app.get("/", (req, res) => {
    const items = db.prepare("SELECT * FROM items").all();
    res.render("index", { items });
});

// **📌 Create（追加）**
app.post("/add", (req, res) => {
    const name = req.body.name;
    if (name.trim() !== "") {
        db.prepare("INSERT INTO items (name) VALUES (?)").run(name);
    }
    res.redirect("/"); // ページをリロード
});

// **📌 Delete（削除）**
app.post("/delete/:id", (req, res) => {
    db.prepare("DELETE FROM items WHERE id = ?").run(req.params.id);
    res.redirect("/");
});

// **📌 Update（編集）**
app.post("/edit/:id", (req, res) => {
    const { id } = req.params;
    const { name } = req.body;
    db.prepare("UPDATE items SET name = ? WHERE id = ?").run(name, id);
    res.redirect("/");
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
```

---

## **📌 3. フロントエンド（HTMX を使った `views/index.ejs`）**
`views/index.ejs` を作成し、HTMX を使ってデータを更新します。  

```html
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HTMX + SQLite CRUD</title>
    <script src="https://unpkg.com/htmx.org@1.9.4"></script>
</head>
<body>
    <h1>SQLite CRUD with HTMX</h1>

    <!-- 新規アイテム追加 -->
    <form hx-post="/add" hx-target="#items" hx-swap="outerHTML">
        <input type="text" name="name" required>
        <button type="submit">追加</button>
    </form>

    <!-- データ一覧 -->
    <div id="items">
        <ul>
            <% items.forEach(item => { %>
                <li id="item-<%= item.id %>">
                    <span><%= item.name %></span>
                    <button hx-delete="/delete/<%= item.id %>" hx-target="#item-<%= item.id %>" hx-swap="outerHTML">削除</button>
                    <button hx-get="/edit-form/<%= item.id %>" hx-target="#item-<%= item.id %>" hx-swap="outerHTML">編集</button>
                </li>
            <% }); %>
        </ul>
    </div>
</body>
</html>
```

---

## **📌 4. 編集フォームを動的に読み込む**
編集ボタンを押したときに、フォームを表示する処理を追加します。  

### **📝 `server.js` に編集フォームのエンドポイントを追加**
```javascript
// **📌 編集フォームを返す**
app.get("/edit-form/:id", (req, res) => {
    const item = db.prepare("SELECT * FROM items WHERE id = ?").get(req.params.id);
    res.send(`
        <form hx-post="/edit/${item.id}" hx-target="#item-${item.id}" hx-swap="outerHTML">
            <input type="text" name="name" value="${item.name}" required>
            <button type="submit">更新</button>
        </form>
    `);
});
```

---

## **📌 5. 動作確認**
### **① サーバーを起動**
```sh
node server.js
```

### **② ブラウザでアクセス**
http://localhost:3000 にアクセスして、以下の操作を試してみてください。  

✅ **追加:** フォームに名前を入力 → 「追加」ボタンを押す  
✅ **削除:** 「削除」ボタンを押す（即座に削除）  
✅ **編集:** 「編集」ボタンを押す → フォームが表示され、更新可能  

---

Basic 認証を追加して、認証されたユーザーだけが CRUD 操作を実行できるようにします。  
すでに `.env` を使っているので、その仕組みを利用します。

---

## **📌 1. `.env` に認証情報を追加**
`BASIC_AUTH_USER` と `BASIC_AUTH_PASS` を設定します。

```ini
BASIC_AUTH_USER=admin
BASIC_AUTH_PASS=password
```

**⚠ `.env` は `.gitignore` に追加する！**
```ini
# .gitignore
.env
```

---

## **📌 2. `server.js` に Basic 認証ミドルウェアを追加**
以下の `basicAuth` ミドルウェアを定義し、CRUD に関わるルートへ適用します。

```javascript
require("dotenv").config();
const express = require("express");
const Database = require("better-sqlite3");
const path = require("path");

const app = express();
const port = 3000;
const db = new Database("db.sqlite");

// 認証情報を環境変数から取得
const USERNAME = process.env.BASIC_AUTH_USER;
const PASSWORD = process.env.BASIC_AUTH_PASS;

// **📌 Basic 認証ミドルウェア**
const basicAuth = (req, res, next) => {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith("Basic ")) {
        res.set("WWW-Authenticate", 'Basic realm="Restricted"');
        return res.status(401).send("認証が必要です");
    }

    try {
        const encoded = authHeader.split(" ")[1]; // "Basic xxxx"
        const decoded = Buffer.from(encoded, "base64").toString("utf-8");
        const [user, pass] = decoded.split(":");

        if (user === USERNAME && pass === PASSWORD) {
            return next(); // 認証成功
        }
    } catch (error) {
        console.error("Basic 認証エラー:", error.message);
    }

    res.set("WWW-Authenticate", 'Basic realm="Restricted"');
    return res.status(401).send("認証失敗");
};

// **📌 ミドルウェア**
app.use(express.urlencoded({ extended: true }));
app.use(express.static("public"));
app.set("view engine", "ejs");

// **📌 Basic 認証を適用**
app.use(basicAuth);

// **📌 Read (一覧表示)**
app.get("/", (req, res) => {
    const items = db.prepare("SELECT * FROM items").all();
    res.render("index", { items });
});

// **📌 Create（追加）**
app.post("/add", (req, res) => {
    const name = req.body.name;
    if (name.trim() !== "") {
        db.prepare("INSERT INTO items (name) VALUES (?)").run(name);
    }
    res.redirect("/");
});

// **📌 Delete（削除）**
app.post("/delete/:id", (req, res) => {
    db.prepare("DELETE FROM items WHERE id = ?").run(req.params.id);
    res.redirect("/");
});

// **📌 Update（編集）**
app.post("/edit/:id", (req, res) => {
    const { id } = req.params;
    const { name } = req.body;
    db.prepare("UPDATE items SET name = ? WHERE id = ?").run(name, id);
    res.redirect("/");
});

// **📌 編集フォームを返す**
app.get("/edit-form/:id", (req, res) => {
    const item = db.prepare("SELECT * FROM items WHERE id = ?").get(req.params.id);
    res.send(`
        <form hx-post="/edit/${item.id}" hx-target="#item-${item.id}" hx-swap="outerHTML">
            <input type="text" name="name" value="${item.name}" required>
            <button type="submit">更新</button>
        </form>
    `);
});

app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
```

---

## **📌 3. 認証の動作確認**
### **① サーバーを起動**
```sh
node server.js
```

### **② ブラウザでアクセス**
http://localhost:3000 にアクセスすると、Basic 認証のダイアログが表示されます。  
✅ **ユーザー名**: `admin`  
✅ **パスワード**: `password`  

---



## **📌 概要**
- **閲覧専用（参照）** のユーザーと、  
- **データを編集（作成・更新・削除）** できる管理ユーザーを区別する。  
- **2種類の Basic 認証** を設定し、ルートごとに適用する。

---

## **📌 1. `.env` にユーザー情報を追加**
`.env` に 2 種類のユーザーを設定する。

```ini
# 参照専用ユーザー（Read-Only）
VIEW_USER=viewuser
VIEW_PASS=viewpass

# 編集可能ユーザー（CRUD 操作が可能）
ADMIN_USER=admin
ADMIN_PASS=adminpass
```

---

## **📌 2. `server.js` に認証処理を追加**
**閲覧専用ユーザー（Read-Only）** は `GET /` のみアクセス可能。  
**管理ユーザー（CRUD）** はデータの作成・編集・削除を実行可能。  

```javascript
require("dotenv").config();
const express = require("express");
const Database = require("better-sqlite3");

const app = express();
const port = 3000;
const db = new Database("db.sqlite");

// .env から認証情報を取得
const VIEW_USER = process.env.VIEW_USER;
const VIEW_PASS = process.env.VIEW_PASS;
const ADMIN_USER = process.env.ADMIN_USER;
const ADMIN_PASS = process.env.ADMIN_PASS;

// **📌 Basic 認証ミドルウェア（汎用）**
const basicAuth = (allowedUser, allowedPass) => {
    return (req, res, next) => {
        const authHeader = req.headers.authorization;
        if (!authHeader || !authHeader.startsWith("Basic ")) {
            res.set("WWW-Authenticate", 'Basic realm="Restricted"');
            return res.status(401).send("認証が必要です");
        }

        try {
            const encoded = authHeader.split(" ")[1];
            const decoded = Buffer.from(encoded, "base64").toString("utf-8");
            const [user, pass] = decoded.split(":");

            if (user === allowedUser && pass === allowedPass) {
                return next(); // 認証成功
            }
        } catch (error) {
            console.error("Basic 認証エラー:", error.message);
        }

        res.set("WWW-Authenticate", 'Basic realm="Restricted"');
        return res.status(401).send("認証失敗");
    };
};

// **📌 閲覧専用（Read-Only）ルート**
app.get("/", basicAuth(VIEW_USER, VIEW_PASS), (req, res) => {
    const items = db.prepare("SELECT * FROM items").all();
    res.render("index.ejs", { items });
});

// **📌 CRUD 操作用（管理者のみ）**
app.post("/add", basicAuth(ADMIN_USER, ADMIN_PASS), (req, res) => {
    const name = req.body.name;
    if (name.trim() !== "") {
        db.prepare("INSERT INTO items (name) VALUES (?)").run(name);
    }
    res.redirect("/");
});

app.post("/delete/:id", basicAuth(ADMIN_USER, ADMIN_PASS), (req, res) => {
    db.prepare("DELETE FROM items WHERE id = ?").run(req.params.id);
    res.redirect("/");
});

app.post("/edit/:id", basicAuth(ADMIN_USER, ADMIN_PASS), (req, res) => {
    const { id } = req.params;
    const { name } = req.body;
    db.prepare("UPDATE items SET name = ? WHERE id = ?").run(name, id);
    res.redirect("/");
});

app.get("/edit-form/:id", basicAuth(ADMIN_USER, ADMIN_PASS), (req, res) => {
    const item = db.prepare("SELECT * FROM items WHERE id = ?").get(req.params.id);
    res.send(`
        <form hx-post="/edit/${item.id}" hx-target="#item-${item.id}" hx-swap="outerHTML">
            <input type="text" name="name" value="${item.name}" required>
            <button type="submit">更新</button>
        </form>
    `);
});

// **📌 サーバー起動**
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});
```

---

## **📌 3. 認証の動作確認**
### **① サーバーを起動**
```sh
node server.js
```

### **② ブラウザでアクセス**
- `http://localhost:3000/` にアクセスすると、**閲覧ユーザー（viewuser/viewpass）** の認証が必要。
- **「追加」「削除」「編集」ボタンを押すと、管理ユーザー（admin/adminpass）認証が求められる。**

---


A `.env` file is a simple text file used to store environment variables for applications. It is commonly used in development to keep sensitive information like API keys, database credentials, and configuration settings out of the main codebase.

### Example `.env` File:
```
DATABASE_URL=mysql://user:password@localhost:3306/mydatabase
API_KEY=your_api_key_here
SECRET_KEY=supersecretpassword
PORT=3000
```

### How It Works:
1. **Keeps Secrets Safe** – Instead of hardcoding sensitive data into your application, you store them in a `.env` file.
2. **Eases Configuration** – Different environments (development, staging, production) can have different `.env` files without modifying the code.
3. **Used with dotenv Libraries** – Many programming languages have libraries (`dotenv` in Node.js, `python-dotenv` in Python) that load `.env` variables into the environment.

### How to Use `.env` in Code:
#### **Node.js (Using `dotenv`)**
```javascript
require('dotenv').config();
console.log(process.env.API_KEY);
```

#### **Python (Using `python-dotenv`)**
```python
from dotenv import load_dotenv
import os

load_dotenv()
api_key = os.getenv("API_KEY")
print(api_key)
```

### Important Notes:
- **Do not commit `.env` files to version control** (add `.env` to `.gitignore`).
- **Use `.env.example`** to share variable names without sensitive values.
  

To use the `dotenv` library in a Node.js project, follow these steps:

### 1. Install the `dotenv` package

First, you need to install the `dotenv` package using npm:

```bash
npm install dotenv
```

### 2. Create a `.env` file

In the root of your project, create a `.env` file and add your environment variables. Here's an example of a `.env` file:

```env
DB_HOST=localhost
DB_USER=root
DB_PASS=password
PORT=3000
SECRET_KEY=mysecretkey
```

### 3. Load environment variables in your code

In your main Node.js file (for example, `app.js` or `index.js`), require the `dotenv` package at the top of your file and call the `config()` function. This will load the variables from the `.env` file into `process.env`.

```javascript
require('dotenv').config();

// Accessing environment variables
const dbHost = process.env.DB_HOST;
const dbUser = process.env.DB_USER;
const dbPass = process.env.DB_PASS;
const port = process.env.PORT;

console.log(`Database Host: ${dbHost}`);
console.log(`Server running on port: ${port}`);
```

### 4. Add `.env` to `.gitignore`

To avoid accidentally committing sensitive data, make sure to add `.env` to your `.gitignore` file:

```gitignore
.env
```

### Example Directory Structure:

```
my-project/
  ├── .env
  ├── .gitignore
  ├── app.js
  └── node_modules/
```

### 5. Run Your Application

Now, when you run your Node.js application (`node app.js`), the environment variables from the `.env` file will be available through `process.env`.

```bash
node app.js
```

You should see the output similar to this:

```bash
Database Host: localhost
Server running on port: 3000
```

### Notes:
- **Sensitive data**: Avoid putting sensitive data directly in the `.env` file if it's shared or exposed. Consider using other secrets management solutions in production (like AWS Secrets Manager, or environment-specific configuration).




Cloudflare Pages は通常静的サイト向けですが、**Cloudflare Pages Functions** を使えばサーバーサイドの処理も可能になります。  


---

## 🌟 **手順の全体像**  
✅ Cloudflare Pages 用にプロジェクト構成を変更  
✅ SQLite をデプロイ可能な形式にする  
✅ Cloudflare Pages にデプロイ  

---

## 📂 **フォルダ構成の変更**

Cloudflare Pages は静的ファイルを `public` フォルダから配信し、  
サーバーサイドのロジックを `functions` フォルダに置く必要があります。

```
project/
│
├── public/              # 静的ファイル（HTML, CSS, JS）
││   └── index.html
├── functions/            # Cloudflare Pages Functions
││   └── [filename].js    # APIルート
├── db.sqlite              # SQLite データベース
├── package.json
├── package-lock.json
├── .env                   # 環境変数ファイル
├── .gitignore
└── wrangler.toml          # Cloudflare設定ファイル
```

---

## 🛠️ **1. プロジェクトを Cloudflare 用に修正**

✅ **静的ファイル → `public/` に移動**  
✅ **Express の代わりに Cloudflare Pages Functions を利用**

---

### 🔧 **`functions/index.js`（メインのAPI）**

Cloudflare Pages Functions は Express のように `app.get`, `app.post` を使えないため、  
`fetch` イベントハンドラを使います。

```javascript
import { Database } from 'better-sqlite3';

const db = new Database('./db.sqlite');

// Basic 認証
const basicAuth = (request, allowedUser, allowedPass) => {
    const authHeader = request.headers.get("Authorization");
    if (!authHeader || !authHeader.startsWith("Basic ")) {
        return new Response("認証が必要です", {
            status: 401,
            headers: { "WWW-Authenticate": 'Basic realm="Restricted"' },
        });
    }

    const credentials = atob(authHeader.split(" ")[1]).split(":");
    const [user, pass] = credentials;
    if (user !== allowedUser || pass !== allowedPass) {
        return new Response("認証失敗", {
            status: 401,
            headers: { "WWW-Authenticate": 'Basic realm="Restricted"' },
        });
    }
    return null; // 認証成功
};

export async function onRequestGet(context) {
    // 閲覧専用ユーザー認証
    const authResponse = basicAuth(context.request, "viewuser", "viewpass");
    if (authResponse) return authResponse;

    // データ取得
    const items = db.prepare("SELECT * FROM items").all();
    return new Response(JSON.stringify(items), {
        headers: { "Content-Type": "application/json" },
    });
}

export async function onRequestPost(context) {
    // 管理者専用ユーザー認証
    const authResponse = basicAuth(context.request, "admin", "adminpass");
    if (authResponse) return authResponse;

    const requestData = await context.request.json();
    const { name } = requestData;

    if (name) {
        db.prepare("INSERT INTO items (name) VALUES (?)").run(name);
        return new Response("Item added successfully", { status: 201 });
    }

    return new Response("Invalid request", { status: 400 });
}
```

---

✅ **閲覧専用ユーザー:** `viewuser/viewpass`  
✅ **管理者ユーザー:** `admin/adminpass`

---

## 📦 **2. SQLite を Cloudflare 対応にする**

💡 **Cloudflare Workers や Pages Functions ではローカルファイルシステムが利用できません！**  
👉 なので、SQLite を **`D1` データベース** に移行します。

---

🔧 D1 データベースを作成
1️⃣ Cloudflare Dashboard ログイン
2️⃣ Workers & Pages → D1 → Create Database
3️⃣ データベース名を設定し、空のデータベースを作成

👉 D1 のエンドポイントや接続情報を取得。

---

## 📝 **3. wrangler.toml の作成**

プロジェクトルートに `wrangler.toml` を作成します。

```toml
name = "htmx-sqlite-crud"
compatibility_date = "2023-12-20"

[vars]
VIEW_USER = "viewuser"
VIEW_PASS = "viewpass"
ADMIN_USER = "admin"
ADMIN_PASS = "adminpass"

[[ d1_databases ]]
binding = "DB"
database_name = "your-d1-database-name"
database_id = "your-d1-database-id"
```

👉 `binding` は `context.env.DB` でアクセスできるようにします。

---

## 🌐 **4. D1 を使ったデータベース操作**

### 🔧 **`functions/index.js`（D1 対応版）**

```javascript
export async function onRequestGet(context) {
    // 認証
    const authResponse = basicAuth(context.request, "viewuser", "viewpass");
    if (authResponse) return authResponse;

    // D1 データベースからデータを取得
    const { results } = await context.env.DB.prepare("SELECT * FROM items").all();
    return new Response(JSON.stringify(results), {
        headers: { "Content-Type": "application/json" },
    });
}

export async function onRequestPost(context) {
    // 認証
    const authResponse = basicAuth(context.request, "admin", "adminpass");
    if (authResponse) return authResponse;

    const requestData = await context.request.json();
    const { name } = requestData;

    if (name) {
        await context.env.DB.prepare("INSERT INTO items (name) VALUES (?)").bind(name).run();
        return new Response("Item added successfully", { status: 201 });
    }

    return new Response("Invalid request", { status: 400 });
}
```

✅ これで Cloudflare の D1 データベースを使用して CRUD を行えます！

---

## 🚀 **5. Cloudflare Pages にデプロイ**

1️⃣ **GitHub プッシュ**

```bash
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin <your-repo-url>
git push -u origin main
```

---

2️⃣ **Cloudflare Pages で新しいプロジェクトを作成**

GitHub リポジトリを選択
ビルドコマンドは不要
ビルド出力ディレクトリを public に設定
functions ディレクトリを自動的に検出

---

✅ **デプロイ完了！**  
👉 Basic 認証で参照専用 & 管理専用の機能を分けつつ、  
👉 Cloudflare D1 を使った SQLite CRUD アプリが動作します！✨

---



Turso をデータベースとして使用し、Cloudflare Pages にデプロイする流れを説明します！  

---

## **🌟 概要**
✅ **Turso**（SQLiteベースのサーバーレスDB）を使用  
✅ **Cloudflare Pages Functions** でバックエンドを実装  
✅ **HTMX** でフロントエンドを構築  

---

## **📂 1. フォルダ構成**
```
project/
│
├── public/              # 静的ファイル（HTML, CSS, JS）
││   └── index.html
├── functions/           # Cloudflare Pages Functions
││   ├── index.js        # APIルート
├── schema.sql           # DBスキーマ
├── package.json
├── .gitignore
├── .env                 # Turso接続情報
├── wrangler.toml        # Cloudflare設定
└── README.md
```

---

## **🛠️ 2. Turso のセットアップ**
### **① Turso CLI をインストール**
```sh
curl -sSfL https://get.tur.so/install.sh | bash
```
または、Homebrew を使う場合：
```sh
brew install chiselstrike/tap/turso
```

---

### **② Turso のアカウント作成**
```sh
turso auth signup
```
ログイン済みなら：
```sh
turso auth login
```

---

### **③ データベースを作成**
```sh
turso db create mydatabase
```
👉 `mydatabase.turso.io` のようなデータベースが作成されます。

---

### **④ スキーマを適用**
プロジェクト内に `schema.sql` を作成：
```sql
CREATE TABLE items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL
);
```
適用するには：
```sh
turso db shell mydatabase < schema.sql
```

---

### **⑤ データベースの URL とトークンを取得**
```sh
turso db tokens create mydatabase
```
👉 `.env` に保存：
```ini
TURSO_DATABASE_URL=https://your-database.turso.io
TURSO_AUTH_TOKEN=your-auth-token
```

---

## **📝 3. `functions/index.js`（Turso を使った API）**
Cloudflare Pages Functions では `fetch` を使って Turso にリクエストを送ります。

```javascript
export async function onRequestGet(context) {
    const url = context.env.TURSO_DATABASE_URL;
    const token = context.env.TURSO_AUTH_TOKEN;

    const response = await fetch(`${url}/execute`, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            statements: ["SELECT * FROM items;"]
        })
    });

    const data = await response.json();
    return new Response(JSON.stringify(data.results[0].rows), {
        headers: { "Content-Type": "application/json" }
    });
}

export async function onRequestPost(context) {
    const url = context.env.TURSO_DATABASE_URL;
    const token = context.env.TURSO_AUTH_TOKEN;
    const requestData = await context.request.json();
    const { name } = requestData;

    if (!name) {
        return new Response("Invalid request", { status: 400 });
    }

    await fetch(`${url}/execute`, {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            statements: [`INSERT INTO items (name) VALUES (?);`],
            args: [[name]]
        })
    });

    return new Response("Item added", { status: 201 });
}
```

---

## **📦 4. `wrangler.toml` の設定**
Cloudflare Pages で環境変数を利用するための設定：
```toml
name = "htmx-turso-app"
compatibility_date = "2023-12-20"

[vars]
TURSO_DATABASE_URL = "https://your-database.turso.io"
TURSO_AUTH_TOKEN = "your-auth-token"
```

---

## **🚀 5. Cloudflare Pages にデプロイ**
### **① GitHub にプッシュ**
```sh
git init
git add .
git commit -m "Initial commit"
git branch -M main
git remote add origin <your-repo-url>
git push -u origin main
```

### **② Cloudflare Pages でプロジェクト作成**
1. Cloudflare Dashboard で **Pages** を開く  
2. 「新しいプロジェクトを作成」→ GitHub を選択  
3. `public/` を静的サイトのルートとして設定  
4. 「デプロイ」ボタンを押す  

---

## 🎉 **完成！**
👉 **Turso + Cloudflare Pages でサーバーレス CRUD アプリが動作！**  
👉 **HTMX を使ってリロードなしでデータ操作！**  
👉 **Basic 認証やその他の API も簡単に追加可能！**  

🔥 **デプロイ後の動作確認や追加のカスタマイズもできます！**  
「エラーが出た」「追加機能が欲しい」などあれば、気軽に聞いてください！ 🚀
